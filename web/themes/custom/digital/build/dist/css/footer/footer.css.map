{"version":3,"sources":["footer/footer.scss","mixins-functions/_mixins-sass-mq.scss","_settings.scss","footer/footer.css"],"names":[],"mappings":"AAAA;;EAAA;ACIA,sBAAA;AAmSA,qBAAA;ADjSA;EACE,yBAAA;EACA,WEFM;EFGN,yBAAA;AGAF;AHEE;EALF;IAMI,mBAAA;EGCF;AACF;AHCE;EACE,iBAAA;EACA,mBAAA;AGCJ;AHCI;EACE,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,yBAAA;EAAA,sBAAA;EAAA,8BAAA;AGCN;AHCM;EAJF;IAKI,4BAAA;IAAA,6BAAA;IAAA,0BAAA;IAAA,sBAAA;IACA,sBAAA;EGEN;AACF;AHCQ;EACE,oCAAA;EAAA,gCAAA;EAAA,4BAAA;EACA,6BAAA;EAAA,0BAAA;AGCV;AHEQ;EACE,2BAAA;EAAA,wBAAA;EACA,kBAAA;EACA,gBAAA;EACA,gBAAA;AGAV;AHGQ;EACE,kBAAA;EACA,cAAA;EACA,gBAAA;AGDV;AHIQ;EACE,4BAAA;EAAA,wBAAA;AGFV;AHQE;;;EAGE,WEnDI;EFoDJ,qBAAA;AGNJ;AHSE;;EAEE,WEzDI;EF0DJ,mBAAA;EACA,qBAAA;AGPJ;AHSI;;EACE,WE9DE;EF+DF,qBAAA;AGNN;AHQM;;EACE,WElEA;EFmEA,iBAAA;EACA,gBAAA;EACA,gBAAA;EACA,0BAAA;EAAA,sBAAA;AGLR;AHQM;;;;EAEE,eAAA;EACA,gBAAA;EACA,gBAAA;AGJR;AHSE;EACE,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,qBAAA;EAAA,kBAAA;EAAA,yBAAA;AGPJ;AHSI;EAJF;IAKI,2BAAA;IAAA,wBAAA;IACA,yBAAA;IAAA,sBAAA;IAAA,8BAAA;IACA,4BAAA;IAAA,2BAAA;EGNJ;AACF;AHQI;EACE,0BAAA;EAAA,yBAAA;AGNN;AHQM;EAHF;IAII,yBAAA;IAAA,wBAAA;EGLN;AACF;AHOM;EACE,qBAAA;AGLR;AHUE;EACE,4BAAA;EAAA,2BAAA;EACA,6BAAA;EAAA,0BAAA;EACA,oBAAA;EAAA,oBAAA;EAAA,aAAA;EACA,4BAAA;EAAA,6BAAA;EAAA,0BAAA;EAAA,sBAAA;EACA,SAAA;AGRJ","file":"footer.css","sourcesContent":["/**\n * header styling.\n */\n@use \"./node_modules/sass-rem\" as rem;\n@import \"../global-includes\";\n\n.footer-bottom {\n  background-color: #012e4d;\n  color: $white;\n  padding-block: 120px 80px;\n\n  @media (max-width: 768px) {\n    padding-block: 5rem;\n  }\n\n  #block-digital-footer {\n    max-width: 1280px;\n    margin-inline: auto;\n\n    .footer-wrapper {\n      display: flex;\n      justify-content: space-between;\n\n      @media (max-width: 768px) {\n        flex-direction: column;\n        padding-inline: 1.5rem;\n      }\n\n      .contact-info {\n        &__social {\n          transform: translateX(-20px);\n          margin-block-start: 1.5rem;\n        }\n\n        &__title {\n          margin-block-start: 1rem;\n          font-size: 2.25rem;\n          line-height: 1.2;\n          font-weight: 600;\n        }\n\n        &__details {\n          font-size: 1.25rem;\n          line-height: 1;\n          font-weight: 400;\n        }\n\n        &__email {\n          margin-block-end: 0.5rem;\n        }\n      }\n    }\n  }\n\n  ul,\n  li,\n  a {\n    color: $white;\n    text-decoration: none;\n  }\n\n  ul,\n  .item-level-1 {\n    color: $white;\n    margin-block: unset;\n    list-style-type: none;\n\n    li {\n      color: $white;\n      list-style-type: none;\n\n      a {\n        color: $white;\n        font-size: 1.5rem;\n        line-height: 1.2;\n        font-weight: 600;\n        margin-block-end: 2rem;\n      }\n\n      ul li,\n      ul li a {\n        font-size: 1rem;\n        line-height: 1.2;\n        font-weight: 400;\n      }\n    }\n  }\n\n  .item-level-1 {\n    display: flex;\n    justify-content: flex-end;\n\n    @media (max-width: 768px) {\n      margin-block-start: 3rem;\n      justify-content: space-between;\n      padding-inline-start: unset;\n    }\n\n    li.has-child {\n      padding-inline-end: 10rem;\n\n      @media (max-width: 768px) {\n        padding-inline-end: 2rem;\n      }\n\n      &:nth-child(2) {\n        padding-inline: unset;\n      }\n    }\n  }\n\n  .item-level-2 {\n    padding-inline-start: unset;\n    margin-block-start: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n}\n","@use \"sass:math\";\n@use \"sass:map\";\n@use \"sass:list\";\n\n/* stylelint-disable */\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$breakpoints: (\n  mobile: 320px,\n  tablet: 740px,\n  desktop: 980px,\n  wide: 1300px\n) !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and example\n$media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n///\n/// @example scss\n///  $font-size-in-ems: px2em(16px);\n///  p { font-size: px2em(16px); }\n///\n/// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $breakpoints\n///\n/// @example scss\n///  $tablet-width: get-breakpoint-width(tablet);\n///  @media (min-width: get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $breakpoints\n///\n/// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $breakpoints\n/// @param {String | Boolean} $until [false] - One of $breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$breakpoints]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $media-type\n/// @requires {Variable} $breakpoints\n/// @requires {function} px2em\n/// @requires {function} get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints,\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - .01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge($map-sorted, ($key: $value));\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: ($name: $width);\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $breakpoints\n/// @requires {Variable} $show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin show-breakpoints($show-breakpoints: $show-breakpoints, $breakpoints: $breakpoints) {\n  body:before {\n    background-color: #FCF8E3;\n    border-bottom: 1px solid #FBEED5;\n    border-left: 1px solid #FBEED5;\n    color: #C09853;\n    font: small-caption;\n    padding: 3px 6px;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: \"#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})\";\n      }\n    }\n\n  }\n}\n\n@if list.length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n\n/* stylelint-enable */\n","$font-sans: sans-serif;\n\n\n$true-black: #000;\n$black: #212121;\n$medium-gray: #98928a;\n$white: #fff;\n$primary-color: #6466f1;\n$primary-color-100: #6366f1;\n$primary-color-50: #f4f6ff;\n$primary-color-00: #f3f6ff;\n$off-white-blue: #f5f5ff;\n$secondary-color: #22c55d;\n$light-periwinkle: #e3e5f1;\n\n// For usage with the container mixin.\n$small_desktop: 1024px;\n$desktop: 1280px;\n\n// Breakpoints.\n$breakpoints: (\n  small: 0,\n  mobile: 375px,\n  small_plus: 520px,\n  medium: 768px,\n  medium-large: 920px,\n  small_desktop: 1024px,\n  med_desktop: 1140px,\n  desktop: 1280px,\n  x_wide: 1440px,\n);\n\n// Uncomment to debug breakpoints.\n//$mq-show-breakpoints: (small, mobile, small_plus, medium, medium-large, small_desktop, desktop, x_wide);\n\n$a-tags-hover: '&:active, &:focus, &:hover ';\n","/**\n * header styling.\n */\n/* stylelint-disable */\n/* stylelint-enable */\n.footer-bottom {\n  background-color: #012e4d;\n  color: #fff;\n  padding-block: 120px 80px;\n}\n@media (max-width: 768px) {\n  .footer-bottom {\n    padding-block: 5rem;\n  }\n}\n.footer-bottom #block-digital-footer {\n  max-width: 1280px;\n  margin-inline: auto;\n}\n.footer-bottom #block-digital-footer .footer-wrapper {\n  display: flex;\n  justify-content: space-between;\n}\n@media (max-width: 768px) {\n  .footer-bottom #block-digital-footer .footer-wrapper {\n    flex-direction: column;\n    padding-inline: 1.5rem;\n  }\n}\n.footer-bottom #block-digital-footer .footer-wrapper .contact-info__social {\n  transform: translateX(-20px);\n  margin-block-start: 1.5rem;\n}\n.footer-bottom #block-digital-footer .footer-wrapper .contact-info__title {\n  margin-block-start: 1rem;\n  font-size: 2.25rem;\n  line-height: 1.2;\n  font-weight: 600;\n}\n.footer-bottom #block-digital-footer .footer-wrapper .contact-info__details {\n  font-size: 1.25rem;\n  line-height: 1;\n  font-weight: 400;\n}\n.footer-bottom #block-digital-footer .footer-wrapper .contact-info__email {\n  margin-block-end: 0.5rem;\n}\n.footer-bottom ul,\n.footer-bottom li,\n.footer-bottom a {\n  color: #fff;\n  text-decoration: none;\n}\n.footer-bottom ul,\n.footer-bottom .item-level-1 {\n  color: #fff;\n  margin-block: unset;\n  list-style-type: none;\n}\n.footer-bottom ul li,\n.footer-bottom .item-level-1 li {\n  color: #fff;\n  list-style-type: none;\n}\n.footer-bottom ul li a,\n.footer-bottom .item-level-1 li a {\n  color: #fff;\n  font-size: 1.5rem;\n  line-height: 1.2;\n  font-weight: 600;\n  margin-block-end: 2rem;\n}\n.footer-bottom ul li ul li,\n.footer-bottom ul li ul li a,\n.footer-bottom .item-level-1 li ul li,\n.footer-bottom .item-level-1 li ul li a {\n  font-size: 1rem;\n  line-height: 1.2;\n  font-weight: 400;\n}\n.footer-bottom .item-level-1 {\n  display: flex;\n  justify-content: flex-end;\n}\n@media (max-width: 768px) {\n  .footer-bottom .item-level-1 {\n    margin-block-start: 3rem;\n    justify-content: space-between;\n    padding-inline-start: unset;\n  }\n}\n.footer-bottom .item-level-1 li.has-child {\n  padding-inline-end: 10rem;\n}\n@media (max-width: 768px) {\n  .footer-bottom .item-level-1 li.has-child {\n    padding-inline-end: 2rem;\n  }\n}\n.footer-bottom .item-level-1 li.has-child:nth-child(2) {\n  padding-inline: unset;\n}\n.footer-bottom .item-level-2 {\n  padding-inline-start: unset;\n  margin-block-start: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}"]}